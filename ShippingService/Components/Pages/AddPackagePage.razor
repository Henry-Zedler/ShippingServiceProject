@page "/addpackage"

@inject IInventory Inventory
@inject NavigationManager Navigation

<h3>Add New Package</h3>

<div class="row justify-content-center">
    <div class="col-6">
        <EditForm method="post" FormName="AddPackageForm" Model="Package" OnValidSubmit="AddPackage" autocomplete="off">
            <h3>
                Add New Package
            </h3>
            <div class="mb-3">
                <label for="Name" class="form-label">
                    Name
                </label>
                <InputText id="Name" @bind-Value="Package.Name" class="form-control shadow-none"></InputText>
            </div>
            <div class="mb-3">
                <label for="Description" class="form-label">
                    Description
                </label>
                <InputTextArea id="Description" @bind-Value="Package.Description" class="form-control shadow-none"></InputTextArea>
            </div>
            <div class="mb-3">
                <label for="Seller" class="form-label">
                    Seller
                </label>
                <InputText id="Seller" @bind-Value="Package.Seller" class="form-control shadow-none"></InputText>
            </div>
            <div class="mb-3"> 
                <label for="adress" class="form-label"> 
                    Address 
                </label>
                @* <InputSelect id="addresses" @bind-Value="Package.AddressID" class="form-control shadow-none"> *@
                <InputSelect id="addresses" @bind-Value="Package.Address" class="form-control shadow-none">

                    <option value="0"> 
                        Select Address
                    </option> 
                    @* @foreach (var address in Enum.GetValues(typeof(Address)))  *@

                    @* @foreach (var address in Vaddresses) *@
                    @* {  *@
                    @*      <option value="@address">  *@
                    @*          @address.ToString()  *@
                    @*      </option>  *@
                    @*  }  *@
                    @* @if (Addresses != null) *@
                    @* { *@
                    @*     foreach (var address in Addresses) *@
                    @*     { *@
                    @*         if (address.Line2 is null) *@
                    @*         { *@
                    @*             <option value="@address.AddressId">@($"{address.Line1}, {address.City}, {address.State}, {address.Zip}")</option> *@
                    @*         } *@
                    @*         else  *@
                    @*         { *@
                    @*             <option value="@address.AddressId">@($"{address.Line1}, {address.Line2}, {address.City}, {address.State}, {address.Zip}")</option> *@
                    @*         } *@
                    @*     } *@
                    @* } *@
                    @if (Addresses != null && Addresses.Any())
                    {
                        foreach (var address in Addresses)
                        {
                            <option value="@address.Id">
                                @($"{address.Line1}, {address.Line2 ?? string.Empty}, {address.City}, {address.State}, {address.Zip}")
                            </option>
                        }
                    }


                 </InputSelect>
                @* <ValidationMessage For="@(() => SelectedAddressId)" /> *@
            </div> 
            <div class="mb-3">
                <button class="btn-primary shadow-none">Submit</button>
                <a href="/viewpackages" class="btn btn-secondary shadow-none ms-3">
                    Go back to list
                </a>
            </div>

            <DataAnnotationsValidator />
            <ValidationSummary />

        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    // public Package Package { get; set; } = new();

    // private async Task AddPackage()
    // {
    //     await Inventory.AddAsync(Package);
    //     Navigation.NavigateTo("/");
    // }
    public Package Package { get; set; } = new();
    private List<Address> Addresses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch addresses using the Inventory service
        Addresses = await Inventory.GetAllAddressesAsync();
    }

    private async Task AddPackage()
    {
        // Set the Address navigation property based on the selected address ID
        // if (SelectedAddressId.HasValue)
        // {
        //     Package.AddressId = SelectedAddressId.Value;
        // }
        // Save the package using the Inventory service
        await Inventory.AddAsync(Package);

        // Navigate back to the package list
        Navigation.NavigateTo("/viewpackages");
    }
}
